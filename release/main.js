var starter = (function (exports) {
  'use strict';

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function setStyle(n, key, value) {
    n.style[key] = value;
    
  }

  function setStyleProperty(n, priorityOpt, key, value) {
    var priority = priorityOpt !== undefined ? priorityOpt : false;
    var style = n.style;
    var _valid = style.setProperty;
    if (_valid !== undefined) {
      return style.setProperty(key, value, priority ? "important" : null);
    } else {
      return setStyle(n, key, value);
    }
  }

  function insertBefore(n, child, refNode) {
    return n.insertBefore(child, refNode);
  }

  function setAttributeNsOptional(n, namespace, key, value) {
    if (namespace === "") {
      return n.setAttribute(key, value);
    } else {
      return n.setAttributeNS(namespace, key, value);
    }
  }

  function removeAttributeNsOptional(n, namespace, key) {
    if (namespace === "") {
      return n.removeAttribute(key);
    } else {
      return n.removeAttributeNS(namespace, key);
    }
  }

  function addEventListener(n, typ, listener, options) {
    return n.addEventListener(typ, listener, options);
  }

  function removeEventListener(n, typ, listener, options) {
    return n.removeEventListener(typ, listener, options);
  }

  function remove_polyfill(param) {
    return (// remove polyfill
    (function() {
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function() {
          if (this.parentNode) {
            this.parentNode.removeChild(this);
          }
        };
      }  }()));
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function requestAnimationFrame_polyfill(param) {
    return (// requestAnimationFrame polyfill
    (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                       || window[vendors[x]+'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                  timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    }()));
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function polyfills(param) {
    remove_polyfill();
    requestAnimationFrame_polyfill();
    
  }
  /* No side effect */

  function caml_array_sub(x, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while(j < len) {
      result[j] = x[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }  return result;
  }

  function get$1(xs, index) {
    if (index < 0 || index >= xs.length) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
    }
    return xs[index];
  }

  function caml_make_vect(len, init) {
    var b = new Array(len);
    for(var i = 0; i < len; ++i){
      b[i] = init;
    }
    return b;
  }
  /* No side effect */

  function app(_f, _args) {
    while(true) {
      var args = _args;
      var f = _f;
      var init_arity = f.length;
      var arity = init_arity === 0 ? 1 : init_arity;
      var len = args.length;
      var d = arity - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      }
      if (d >= 0) {
        return (function(f,args){
        return function (x) {
          return app(f, args.concat([x]));
        }
        }(f,args));
      }
      _args = caml_array_sub(args, arity, -d | 0);
      _f = f.apply(null, caml_array_sub(args, 0, arity));
      continue ;
    }}

  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      switch (arity) {
        case 1 :
            return o(a0);
        case 2 :
            return function (param) {
              return o(a0, param);
            };
        case 3 :
            return function (param, param$1) {
              return o(a0, param, param$1);
            };
        case 4 :
            return function (param, param$1, param$2) {
              return o(a0, param, param$1, param$2);
            };
        case 5 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, param, param$1, param$2, param$3);
            };
        case 6 :
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, param, param$1, param$2, param$3, param$4);
            };
        case 7 :
            return function (param, param$1, param$2, param$3, param$4, param$5) {
              return o(a0, param, param$1, param$2, param$3, param$4, param$5);
            };
        default:
          return app(o, [a0]);
      }
    }
  }

  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [a1]);
        case 2 :
            return o(a0, a1);
        case 3 :
            return function (param) {
              return o(a0, a1, param);
            };
        case 4 :
            return function (param, param$1) {
              return o(a0, a1, param, param$1);
            };
        case 5 :
            return function (param, param$1, param$2) {
              return o(a0, a1, param, param$1, param$2);
            };
        case 6 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, param, param$1, param$2, param$3);
            };
        case 7 :
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, a1, param, param$1, param$2, param$3, param$4);
            };
        default:
          return app(o, [
                      a0,
                      a1
                    ]);
      }
    }
  }

  function _3(o, a0, a1, a2) {
    var arity = o.length;
    if (arity === 3) {
      return o(a0, a1, a2);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2
                      ]);
        case 2 :
            return app(o(a0, a1), [a2]);
        case 3 :
            return o(a0, a1, a2);
        case 4 :
            return function (param) {
              return o(a0, a1, a2, param);
            };
        case 5 :
            return function (param, param$1) {
              return o(a0, a1, a2, param, param$1);
            };
        case 6 :
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, param, param$1, param$2);
            };
        case 7 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, a2, param, param$1, param$2, param$3);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2
                    ]);
      }
    }
  }

  function _4(o, a0, a1, a2, a3) {
    var arity = o.length;
    if (arity === 4) {
      return o(a0, a1, a2, a3);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [a3]);
        case 4 :
            return o(a0, a1, a2, a3);
        case 5 :
            return function (param) {
              return o(a0, a1, a2, a3, param);
            };
        case 6 :
            return function (param, param$1) {
              return o(a0, a1, a2, a3, param, param$1);
            };
        case 7 :
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, a3, param, param$1, param$2);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3
                    ]);
      }
    }
  }

  function _5(o, a0, a1, a2, a3, a4) {
    var arity = o.length;
    if (arity === 5) {
      return o(a0, a1, a2, a3, a4);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [a4]);
        case 5 :
            return o(a0, a1, a2, a3, a4);
        case 6 :
            return function (param) {
              return o(a0, a1, a2, a3, a4, param);
            };
        case 7 :
            return function (param, param$1) {
              return o(a0, a1, a2, a3, a4, param, param$1);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4
                    ]);
      }
    }
  }

  function _6(o, a0, a1, a2, a3, a4, a5) {
    var arity = o.length;
    if (arity === 6) {
      return o(a0, a1, a2, a3, a4, a5);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [a5]);
        case 6 :
            return o(a0, a1, a2, a3, a4, a5);
        case 7 :
            return function (param) {
              return o(a0, a1, a2, a3, a4, a5, param);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5
                    ]);
      }
    }
  }

  function _7(o, a0, a1, a2, a3, a4, a5, a6) {
    var arity = o.length;
    if (arity === 7) {
      return o(a0, a1, a2, a3, a4, a5, a6);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5,
                        a6
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [
                        a5,
                        a6
                      ]);
        case 6 :
            return app(o(a0, a1, a2, a3, a4, a5), [a6]);
        case 7 :
            return o(a0, a1, a2, a3, a4, a5, a6);
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6
                    ]);
      }
    }
  }

  function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
    var arity = o.length;
    if (arity === 8) {
      return o(a0, a1, a2, a3, a4, a5, a6, a7);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [
                        a5,
                        a6,
                        a7
                      ]);
        case 6 :
            return app(o(a0, a1, a2, a3, a4, a5), [
                        a6,
                        a7
                      ]);
        case 7 :
            return app(o(a0, a1, a2, a3, a4, a5, a6), [a7]);
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      }
    }
  }
  /* No side effect */

  function caml_string_compare(s1, s2) {
    if (s1 === s2) {
      return 0;
    } else if (s1 < s2) {
      return -1;
    } else {
      return 1;
    }
  }
  /* No side effect */

  var for_in = (function(o,foo){
          for (var x in o) { foo(x); }});

  function caml_equal(a, b) {
    if (a === b) {
      return true;
    }
    var a_type = typeof a;
    if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
      return false;
    }
    var b_type = typeof b;
    if (a_type === "function" || b_type === "function") {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: functional value",
            Error: new Error()
          };
    }
    if (b_type === "number" || b_type === "undefined" || b === null) {
      return false;
    }
    var tag_a = a.TAG | 0;
    var tag_b = b.TAG | 0;
    if (tag_a === 248) {
      return a[1] === b[1];
    }
    if (tag_a === 251) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: abstract value",
            Error: new Error()
          };
    }
    if (tag_a !== tag_b) {
      return false;
    }
    var len_a = a.length | 0;
    var len_b = b.length | 0;
    if (len_a === len_b) {
      if (Array.isArray(a)) {
        var _i = 0;
        while(true) {
          var i = _i;
          if (i === len_a) {
            return true;
          }
          if (!caml_equal(a[i], b[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue ;
        }    } else if ((a instanceof Date && b instanceof Date)) {
        return !(a > b || a < b);
      } else {
        var result = {
          contents: true
        };
        var do_key_a = function (key) {
          if (!b.hasOwnProperty(key)) {
            result.contents = false;
            return ;
          }
          
        };
        var do_key_b = function (key) {
          if (!a.hasOwnProperty(key) || !caml_equal(b[key], a[key])) {
            result.contents = false;
            return ;
          }
          
        };
        for_in(a, do_key_a);
        if (result.contents) {
          for_in(b, do_key_b);
        }
        return result.contents;
      }
    } else {
      return false;
    }
  }
  /* No side effect */

  function caml_create_bytes(len) {
    if (len < 0) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.create",
            Error: new Error()
          };
    }
    var result = new Array(len);
    for(var i = 0; i < len; ++i){
      result[i] = /* '\000' */0;
    }
    return result;
  }

  function bytes_to_string(a) {
    var len = a.length;
    var s = "";
    var s_len = len;
    if (len <= 4096 && len === a.length) {
      return String.fromCharCode.apply(null, a);
    }
    var offset = 0;
    while(s_len > 0) {
      var next = s_len < 1024 ? s_len : 1024;
      var tmp_bytes = new Array(next);
      for(var k = 0; k < next; ++k){
        tmp_bytes[k] = a[k + offset | 0];
      }
      s = s + String.fromCharCode.apply(null, tmp_bytes);
      s_len = s_len - next | 0;
      offset = offset + next | 0;
    }  return s;
  }

  function caml_blit_string(s1, i1, s2, i2, len) {
    if (len <= 0) {
      return ;
    }
    var off1 = s1.length - i1 | 0;
    if (len <= off1) {
      for(var i = 0; i < len; ++i){
        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
      }
      return ;
    }
    for(var i$1 = 0; i$1 < off1; ++i$1){
      s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
    }
    for(var i$2 = off1; i$2 < len; ++i$2){
      s2[i2 + i$2 | 0] = /* '\000' */0;
    }
    
  }
  /* No side effect */

  var id = {
    contents: 0
  };

  function create$1(str) {
    id.contents = id.contents + 1 | 0;
    return str + ("/" + id.contents);
  }

  function caml_is_extension(e) {
    if (e == null) {
      return false;
    } else {
      return typeof e.RE_EXN_ID === "string";
    }
  }
  /* No side effect */

  function some(x) {
    if (x === undefined) {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: 0
            };
    } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
            };
    } else {
      return x;
    }
  }

  function valFromOption(x) {
    if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined)) {
      return x;
    }
    var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth === 0) {
      return ;
    } else {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
            };
    }
  }
  /* No side effect */

  var $$Error = /* @__PURE__ */create$1("Caml_js_exceptions.Error");

  function internalToOCamlException(e) {
    if (caml_is_extension(e)) {
      return e;
    } else {
      return {
              RE_EXN_ID: $$Error,
              _1: e
            };
    }
  }
  /* No side effect */

  var min_int = -2147483648;

  function $at(l1, l2) {
    if (l1) {
      return {
              hd: l1.hd,
              tl: $at(l1.tl, l2)
            };
    } else {
      return l2;
    }
  }

  var max_int = 2147483647;
  /* No side effect */

  function rev_append(_l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return l2;
      }
      _l2 = {
        hd: l1.hd,
        tl: l2
      };
      _l1 = l1.tl;
      continue ;
    }}

  function rev(l) {
    return rev_append(l, /* [] */0);
  }

  function map$3(f, param) {
    if (!param) {
      return /* [] */0;
    }
    var r = _1(f, param.hd);
    return {
            hd: r,
            tl: map$3(f, param.tl)
          };
  }

  function iter$1(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      _1(f, param.hd);
      _param = param.tl;
      continue ;
    }}

  function fold_left(f, _accu, _l) {
    while(true) {
      var l = _l;
      var accu = _accu;
      if (!l) {
        return accu;
      }
      _l = l.tl;
      _accu = _2(f, accu, l.hd);
      continue ;
    }}

  function fold_right$1(f, l, accu) {
    if (l) {
      return _2(f, l.hd, fold_right$1(f, l.tl, accu));
    } else {
      return accu;
    }
  }

  function fold_left2(f, _accu, _l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      var accu = _accu;
      if (l1) {
        if (l2) {
          _l2 = l2.tl;
          _l1 = l1.tl;
          _accu = _3(f, accu, l1.hd, l2.hd);
          continue ;
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "List.fold_left2",
              Error: new Error()
            };
      }
      if (l2) {
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "List.fold_left2",
              Error: new Error()
            };
      }
      return accu;
    }}

  function find_all(p) {
    return function (param) {
      var _accu = /* [] */0;
      var _param = param;
      while(true) {
        var param$1 = _param;
        var accu = _accu;
        if (!param$1) {
          return rev_append(accu, /* [] */0);
        }
        var l = param$1.tl;
        var x = param$1.hd;
        if (_1(p, x)) {
          _param = l;
          _accu = {
            hd: x,
            tl: accu
          };
          continue ;
        }
        _param = l;
        continue ;
      }  };
  }

  var append = $at;

  var filter$1 = find_all;
  /* No side effect */

  function ensure_ge(x, y) {
    if (x >= y) {
      return x;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.concat",
          Error: new Error()
        };
  }

  function sum_lengths(_acc, seplen, _param) {
    while(true) {
      var param = _param;
      var acc = _acc;
      if (!param) {
        return acc;
      }
      var tl = param.tl;
      var hd = param.hd;
      if (!tl) {
        return hd.length + acc | 0;
      }
      _param = tl;
      _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
      continue ;
    }}

  function unsafe_blits(dst, _pos, sep, seplen, _param) {
    while(true) {
      var param = _param;
      var pos = _pos;
      if (!param) {
        return dst;
      }
      var tl = param.tl;
      var hd = param.hd;
      if (tl) {
        caml_blit_string(hd, 0, dst, pos, hd.length);
        caml_blit_string(sep, 0, dst, pos + hd.length | 0, seplen);
        _param = tl;
        _pos = (pos + hd.length | 0) + seplen | 0;
        continue ;
      }
      caml_blit_string(hd, 0, dst, pos, hd.length);
      return dst;
    }}

  function concat$1(sep, l) {
    if (!l) {
      return "";
    }
    var seplen = sep.length;
    return bytes_to_string(unsafe_blits(caml_create_bytes(sum_lengths(0, seplen, l)), 0, sep, seplen, l));
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function createElementNsOptional(namespace, tagName) {
    if (namespace === "") {
      return document.createElement(tagName);
    } else {
      return document.createElementNS(namespace, tagName);
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  var noNode$1 = {
    TAG: /* CommentNode */0,
    _0: ""
  };

  function fullnode(namespace, tagName, key, unique, props, vdoms) {
    return {
            TAG: /* Node */2,
            _0: namespace,
            _1: tagName,
            _2: key,
            _3: unique,
            _4: props,
            _5: vdoms
          };
  }

  function onMsg(name, msg) {
    return {
            TAG: /* Event */3,
            _0: name,
            _1: {
              TAG: /* EventHandlerMsg */1,
              _0: msg
            },
            _2: {
              contents: undefined
            }
          };
  }

  function style$1(key, value) {
    return {
            TAG: /* Style */4,
            _0: {
              hd: [
                key,
                value
              ],
              tl: /* [] */0
            }
          };
  }

  function renderToHtmlString(_s) {
    while(true) {
      var s = _s;
      switch (s.TAG | 0) {
        case /* CommentNode */0 :
            return "<!-- " + (s._0 + " -->");
        case /* Text */1 :
            return s._0;
        case /* Node */2 :
            var tagName = s._1;
            var namespace = s._0;
            return concat$1("", {
                        hd: "<",
                        tl: {
                          hd: namespace,
                          tl: {
                            hd: namespace === "" ? "" : ":",
                            tl: {
                              hd: tagName,
                              tl: {
                                hd: concat$1("", map$3((function (p) {
                                            if (typeof p === "number") {
                                              return "";
                                            }
                                            switch (p.TAG | 0) {
                                              case /* RawProp */0 :
                                                  return concat$1("", {
                                                              hd: " ",
                                                              tl: {
                                                                hd: p._0,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._1,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Attribute */1 :
                                                  return concat$1("", {
                                                              hd: " ",
                                                              tl: {
                                                                hd: p._1,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._2,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Data */2 :
                                                  return concat$1("", {
                                                              hd: " data-",
                                                              tl: {
                                                                hd: p._0,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._1,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Event */3 :
                                                  return "";
                                              case /* Style */4 :
                                                  return concat$1("", {
                                                              hd: " style=\"",
                                                              tl: {
                                                                hd: concat$1(";", map$3((function (param) {
                                                                            return concat$1("", {
                                                                                        hd: param[0],
                                                                                        tl: {
                                                                                          hd: ":",
                                                                                          tl: {
                                                                                            hd: param[1],
                                                                                            tl: {
                                                                                              hd: ";",
                                                                                              tl: /* [] */0
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      });
                                                                          }), p._0)),
                                                                tl: {
                                                                  hd: "\"",
                                                                  tl: /* [] */0
                                                                }
                                                              }
                                                            });
                                              
                                            }
                                          }), s._4)),
                                tl: {
                                  hd: ">",
                                  tl: {
                                    hd: concat$1("", map$3(renderToHtmlString, s._5)),
                                    tl: {
                                      hd: "</",
                                      tl: {
                                        hd: tagName,
                                        tl: {
                                          hd: ">",
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      });
        case /* LazyGen */3 :
            _s = _1(s._1, undefined);
            continue ;
        case /* Tagger */4 :
            _s = s._1;
            continue ;
        
      }
    }}

  function eventHandler(callbacks, cb) {
    return function (ev) {
      var msg = _1(cb.contents, ev);
      if (msg !== undefined) {
        return _1(callbacks.contents.enqueue, valFromOption(msg));
      }
      
    };
  }

  function eventHandler_GetCB(msg) {
    if (msg.TAG === /* EventHandlerCallback */0) {
      return msg._1;
    }
    var msg$1 = msg._0;
    return function (_ev) {
      return some(msg$1);
    };
  }

  function compareEventHandlerTypes(left, msg) {
    if (msg.TAG === /* EventHandlerCallback */0) {
      if (left.TAG === /* EventHandlerCallback */0) {
        return msg._0 === left._0;
      } else {
        return false;
      }
    } else if (left.TAG === /* EventHandlerCallback */0 || !caml_equal(msg._0, left._0)) {
      return false;
    } else {
      return true;
    }
  }

  function eventHandler_Register(callbacks, elem, name, handlerType) {
    var cb = {
      contents: eventHandler_GetCB(handlerType)
    };
    var handler = eventHandler(callbacks, cb);
    addEventListener(elem, name, handler, false);
    return {
            handler: handler,
            cb: cb
          };
  }

  function eventHandler_Unregister(elem, name, cache) {
    if (cache !== undefined) {
      removeEventListener(elem, name, cache.handler, false);
      return ;
    }
    
  }

  function eventHandler_Mutate(callbacks, elem, oldName, newName, oldHandlerType, newHandlerType, oldCache, newCache) {
    var oldcache = oldCache.contents;
    if (oldcache === undefined) {
      newCache.contents = eventHandler_Register(callbacks, elem, newName, newHandlerType);
      return ;
    }
    if (oldName === newName) {
      newCache.contents = oldCache.contents;
      if (compareEventHandlerTypes(oldHandlerType, newHandlerType)) {
        return ;
      }
      var cb = eventHandler_GetCB(newHandlerType);
      oldcache.cb.contents = cb;
      return ;
    }
    oldCache.contents = eventHandler_Unregister(elem, oldName, oldCache.contents);
    newCache.contents = eventHandler_Register(callbacks, elem, newName, newHandlerType);
    
  }

  function patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, _idx, s) {
    if (typeof s === "number") {
      return ;
    }
    switch (s.TAG | 0) {
      case /* RawProp */0 :
          elem[s._0] = s._1;
          return ;
      case /* Attribute */1 :
          return setAttributeNsOptional(elem, s._0, s._1, s._2);
      case /* Data */2 :
          console.log([
                "TODO:  Add Data Unhandled",
                s._0,
                s._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Add Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          s._2.contents = eventHandler_Register(callbacks, elem, s._0, s._1);
          return ;
      case /* Style */4 :
          return fold_left((function (param, param$1) {
                        return setStyleProperty(elem, undefined, param$1[0], param$1[1]);
                      }), undefined, s._0);
      
    }
  }

  function patchVNodesOnElems_PropertiesApply_Remove(_callbacks, elem, _idx, s) {
    if (typeof s === "number") {
      return ;
    }
    switch (s.TAG | 0) {
      case /* RawProp */0 :
          elem[s._0] = undefined;
          return ;
      case /* Attribute */1 :
          return removeAttributeNsOptional(elem, s._0, s._1);
      case /* Data */2 :
          console.log([
                "TODO:  Remove Data Unhandled",
                s._0,
                s._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Remove Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          var cache = s._2;
          cache.contents = eventHandler_Unregister(elem, s._0, cache.contents);
          return ;
      case /* Style */4 :
          return fold_left((function (param, param$1) {
                        return setStyleProperty(elem, undefined, param$1[0], null);
                      }), undefined, s._0);
      
    }
  }

  function patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, oldProp, newProp) {
    patchVNodesOnElems_PropertiesApply_Remove(callbacks, elem, idx, oldProp);
    patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, idx, newProp);
    
  }

  function patchVNodesOnElems_PropertiesApply_Mutate(_callbacks, elem, _idx, oldProp, _newProp) {
    if (typeof _newProp === "number") {
      throw {
            RE_EXN_ID: "Failure",
            _1: "This should never be called as all entries through NoProp are gated.",
            Error: new Error()
          };
    }
    switch (_newProp.TAG | 0) {
      case /* RawProp */0 :
          elem[_newProp._0] = _newProp._1;
          return ;
      case /* Attribute */1 :
          return setAttributeNsOptional(elem, _newProp._0, _newProp._1, _newProp._2);
      case /* Data */2 :
          console.log([
                "TODO:  Mutate Data Unhandled",
                _newProp._0,
                _newProp._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Mutate Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          throw {
                RE_EXN_ID: "Failure",
                _1: "This will never be called because it is gated",
                Error: new Error()
              };
      case /* Style */4 :
          if (typeof oldProp === "number") {
            throw {
                  RE_EXN_ID: "Failure",
                  _1: "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!",
                  Error: new Error()
                };
          }
          if (oldProp.TAG === /* Style */4) {
            return fold_left2((function (param, param$1, param$2) {
                          var nv = param$2[1];
                          var nk = param$2[0];
                          var ok = param$1[0];
                          if (ok === nk) {
                            if (param$1[1] === nv) {
                              return ;
                            } else {
                              return setStyleProperty(elem, undefined, nk, nv);
                            }
                          } else {
                            setStyleProperty(elem, undefined, ok, null);
                            return setStyleProperty(elem, undefined, nk, nv);
                          }
                        }), undefined, oldProp._0, _newProp._0);
          }
          throw {
                RE_EXN_ID: "Failure",
                _1: "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!",
                Error: new Error()
              };
      
    }
  }

  function patchVNodesOnElems_PropertiesApply(callbacks, elem, _idx, _oldProperties, _newProperties) {
    while(true) {
      var newProperties = _newProperties;
      var oldProperties = _oldProperties;
      var idx = _idx;
      if (!oldProperties) {
        if (newProperties) {
          return false;
        } else {
          return true;
        }
      }
      var _oldProp = oldProperties.hd;
      if (!newProperties) {
        return false;
      }
      if (typeof _oldProp === "number") {
        if (typeof newProperties.hd === "number") {
          _newProperties = newProperties.tl;
          _oldProperties = oldProperties.tl;
          _idx = idx + 1 | 0;
          continue ;
        }
        
      } else {
        switch (_oldProp.TAG | 0) {
          case /* RawProp */0 :
              var newProp = newProperties.hd;
              if (typeof newProp !== "number" && newProp.TAG === /* RawProp */0) {
                if (_oldProp._0 === newProp._0 && _oldProp._1 === newProp._1) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Attribute */1 :
              var newProp$1 = newProperties.hd;
              if (typeof newProp$1 !== "number" && newProp$1.TAG === /* Attribute */1) {
                if (_oldProp._0 === newProp$1._0 && _oldProp._1 === newProp$1._1 && _oldProp._2 === newProp$1._2) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$1);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Data */2 :
              var newProp$2 = newProperties.hd;
              if (typeof newProp$2 !== "number" && newProp$2.TAG === /* Data */2) {
                if (_oldProp._0 === newProp$2._0 && _oldProp._1 === newProp$2._1) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$2);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Event */3 :
              var _newProp = newProperties.hd;
              if (typeof _newProp !== "number" && _newProp.TAG === /* Event */3) {
                eventHandler_Mutate(callbacks, elem, _oldProp._0, _newProp._0, _oldProp._1, _newProp._1, _oldProp._2, _newProp._2);
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Style */4 :
              var newProp$3 = newProperties.hd;
              if (typeof newProp$3 !== "number" && newProp$3.TAG === /* Style */4) {
                if (caml_equal(_oldProp._0, newProp$3._0)) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$3);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          
        }
      }
      patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, _oldProp, newProperties.hd);
      _newProperties = newProperties.tl;
      _oldProperties = oldProperties.tl;
      _idx = idx + 1 | 0;
      continue ;
    }}

  function patchVNodesOnElems_Properties(callbacks, elem, oldProperties, newProperties) {
    return patchVNodesOnElems_PropertiesApply(callbacks, elem, 0, oldProperties, newProperties);
  }

  function patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, param) {
    if (param.TAG === /* Node */2) {
      var newProperties = param._4;
      var oldChild = get$1(elems, idx);
      var newChild = createElementNsOptional(param._0, param._1);
      var match = patchVNodesOnElems_Properties(callbacks, newChild, map$3((function (param) {
                  return /* NoProp */0;
                }), newProperties), newProperties);
      if (match) {
        var childChildren = newChild.childNodes;
        patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param._5);
        insertBefore(elem, newChild, oldChild);
        elem.removeChild(oldChild);
        return ;
      }
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "vdom.ml",
              343,
              13
            ],
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Node replacement should never be passed anything but a node itself",
          Error: new Error()
        };
  }

  function patchVNodesOnElems_CreateElement(_callbacks, _s) {
    while(true) {
      var s = _s;
      var callbacks = _callbacks;
      switch (s.TAG | 0) {
        case /* CommentNode */0 :
            var text = s._0;
            return document.createComment(text);
        case /* Text */1 :
            var text$1 = s._0;
            return document.createTextNode(text$1);
        case /* Node */2 :
            var newProperties = s._4;
            var newChild = createElementNsOptional(s._0, s._1);
            var match = patchVNodesOnElems_Properties(callbacks, newChild, map$3((function (param) {
                        return /* NoProp */0;
                      }), newProperties), newProperties);
            if (match) {
              var childChildren = newChild.childNodes;
              patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, s._5);
              return newChild;
            }
            throw {
                  RE_EXN_ID: "Match_failure",
                  _1: [
                    "vdom.ml",
                    368,
                    11
                  ],
                  Error: new Error()
                };
        case /* LazyGen */3 :
            var vdom = _1(s._1, undefined);
            s._2.contents = vdom;
            _s = vdom;
            continue ;
        case /* Tagger */4 :
            _s = s._1;
            _callbacks = _1(s._0, callbacks);
            continue ;
        
      }
    }}

  function patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode) {
    if (oldNode.TAG === /* Node */2) {
      if (newNode.TAG === /* Node */2) {
        if (oldNode._3 !== newNode._3 || oldNode._1 !== newNode._1) {
          return patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        }
        var child = get$1(elems, idx);
        var childChildren = child.childNodes;
        if (patchVNodesOnElems_Properties(callbacks, child, oldNode._4, newNode._4)) ; else {
          console.log("VDom:  Failed swapping properties because the property list length changed, use `noProp` to swap properties instead, not by altering the list structure.  This is a massive inefficiency until this issue is resolved.");
          patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        }
        return patchVNodesOnElems(callbacks, child, childChildren, 0, oldNode._5, newNode._5);
      }
      throw {
            RE_EXN_ID: "Failure",
            _1: "Non-node passed to patchVNodesOnElems_MutateNode",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Non-node passed to patchVNodesOnElems_MutateNode",
          Error: new Error()
        };
  }

  function patchVNodesOnElems(callbacks, elem, elems, _idx, _oldVNodes, _newVNodes) {
    while(true) {
      var newVNodes = _newVNodes;
      var oldVNodes = _oldVNodes;
      var idx = _idx;
      if (oldVNodes) {
        var oldNode = oldVNodes.hd;
        switch (oldNode.TAG | 0) {
          case /* CommentNode */0 :
              if (newVNodes) {
                var newS = newVNodes.hd;
                if (newS.TAG === /* CommentNode */0 && oldNode._0 === newS._0) {
                  _newVNodes = newVNodes.tl;
                  _oldVNodes = oldVNodes.tl;
                  _idx = idx + 1 | 0;
                  continue ;
                }
                
              }
              break;
          case /* Text */1 :
              if (newVNodes) {
                var newText = newVNodes.hd;
                if (newText.TAG === /* Text */1) {
                  var newText$1 = newText._0;
                  if (oldNode._0 !== newText$1) {
                    var child = get$1(elems, idx);
                    child.nodeValue = newText$1;
                  }
                  _newVNodes = newVNodes.tl;
                  _oldVNodes = oldVNodes.tl;
                  _idx = idx + 1 | 0;
                  continue ;
                }
                
              }
              break;
          case /* Node */2 :
              if (newVNodes) {
                var newNode = newVNodes.hd;
                if (newNode.TAG === /* Node */2) {
                  var newRest = newVNodes.tl;
                  var newKey = newNode._2;
                  var newTagName = newNode._1;
                  var newNamespace = newNode._0;
                  var oldRest = oldVNodes.tl;
                  var oldKey = oldNode._2;
                  var oldTagName = oldNode._1;
                  var oldNamespace = oldNode._0;
                  if (oldKey === newKey && oldKey !== "") {
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  if (oldKey === "" || newKey === "") {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  var exit = 0;
                  var exit$1 = 0;
                  if (oldRest) {
                    var match = oldRest.hd;
                    if (match.TAG === /* Node */2) {
                      var olderRest = oldRest.tl;
                      var olderKey = match._2;
                      var olderTagName = match._1;
                      var olderNamespace = match._0;
                      var exit$2 = 0;
                      if (newRest) {
                        var match$1 = newRest.hd;
                        if (match$1.TAG === /* Node */2) {
                          if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey && oldNamespace === match$1._0 && oldTagName === match$1._1 && oldKey === match$1._2) {
                            var firstChild = get$1(elems, idx);
                            var secondChild = get$1(elems, idx + 1 | 0);
                            elem.removeChild(secondChild);
                            insertBefore(elem, secondChild, firstChild);
                            _newVNodes = newRest.tl;
                            _oldVNodes = olderRest;
                            _idx = idx + 2 | 0;
                            continue ;
                          }
                          exit$2 = 4;
                        } else {
                          exit$2 = 4;
                        }
                      } else {
                        exit$2 = 4;
                      }
                      if (exit$2 === 4) {
                        if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey) {
                          var oldChild = get$1(elems, idx);
                          elem.removeChild(oldChild);
                          _newVNodes = newRest;
                          _oldVNodes = olderRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$1 = 3;
                      }
                      
                    } else {
                      exit$1 = 3;
                    }
                  } else {
                    exit$1 = 3;
                  }
                  if (exit$1 === 3) {
                    if (newRest) {
                      var match$2 = newRest.hd;
                      if (match$2.TAG === /* Node */2) {
                        if (oldNamespace === match$2._0 && oldTagName === match$2._1 && oldKey === match$2._2) {
                          var oldChild$1 = get$1(elems, idx);
                          var newChild = patchVNodesOnElems_CreateElement(callbacks, newNode);
                          insertBefore(elem, newChild, oldChild$1);
                          _newVNodes = newRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit = 2;
                      } else {
                        exit = 2;
                      }
                    } else {
                      exit = 2;
                    }
                  }
                  if (exit === 2) {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  
                }
                
              }
              break;
          case /* LazyGen */3 :
              if (newVNodes) {
                var match$3 = newVNodes.hd;
                if (match$3.TAG === /* LazyGen */3) {
                  var newRest$1 = newVNodes.tl;
                  var newCache = match$3._2;
                  var newGen = match$3._1;
                  var newKey$1 = match$3._0;
                  var oldRest$1 = oldVNodes.tl;
                  var oldCache = oldNode._2;
                  var oldKey$1 = oldNode._0;
                  if (oldKey$1 === newKey$1) {
                    newCache.contents = oldCache.contents;
                    _newVNodes = newRest$1;
                    _oldVNodes = oldRest$1;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  var exit$3 = 0;
                  var exit$4 = 0;
                  if (oldRest$1) {
                    var match$4 = oldRest$1.hd;
                    if (match$4.TAG === /* LazyGen */3) {
                      var olderRest$1 = oldRest$1.tl;
                      var olderKey$1 = match$4._0;
                      var exit$5 = 0;
                      if (newRest$1) {
                        var match$5 = newRest$1.hd;
                        if (match$5.TAG === /* LazyGen */3) {
                          if (olderKey$1 === newKey$1 && oldKey$1 === match$5._0) {
                            var firstChild$1 = get$1(elems, idx);
                            var secondChild$1 = get$1(elems, idx + 1 | 0);
                            elem.removeChild(secondChild$1);
                            insertBefore(elem, secondChild$1, firstChild$1);
                            _newVNodes = newRest$1.tl;
                            _oldVNodes = olderRest$1;
                            _idx = idx + 2 | 0;
                            continue ;
                          }
                          exit$5 = 4;
                        } else {
                          exit$5 = 4;
                        }
                      } else {
                        exit$5 = 4;
                      }
                      if (exit$5 === 4) {
                        if (olderKey$1 === newKey$1) {
                          var oldChild$2 = get$1(elems, idx);
                          elem.removeChild(oldChild$2);
                          var oldVdom = match$4._2.contents;
                          newCache.contents = oldVdom;
                          _newVNodes = newRest$1;
                          _oldVNodes = olderRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$4 = 3;
                      }
                      
                    } else {
                      exit$4 = 3;
                    }
                  } else {
                    exit$4 = 3;
                  }
                  if (exit$4 === 3) {
                    if (newRest$1) {
                      var match$6 = newRest$1.hd;
                      if (match$6.TAG === /* LazyGen */3) {
                        if (match$6._0 === oldKey$1) {
                          var oldChild$3 = get$1(elems, idx);
                          var newVdom = _1(newGen, undefined);
                          newCache.contents = newVdom;
                          var newChild$1 = patchVNodesOnElems_CreateElement(callbacks, newVdom);
                          insertBefore(elem, newChild$1, oldChild$3);
                          _newVNodes = newRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$3 = 2;
                      } else {
                        exit$3 = 2;
                      }
                    } else {
                      exit$3 = 2;
                    }
                  }
                  if (exit$3 === 2) {
                    var oldVdom$1 = oldCache.contents;
                    var newVdom$1 = _1(newGen, undefined);
                    newCache.contents = newVdom$1;
                    _newVNodes = {
                      hd: newVdom$1,
                      tl: newRest$1
                    };
                    _oldVNodes = {
                      hd: oldVdom$1,
                      tl: oldRest$1
                    };
                    continue ;
                  }
                  
                }
                
              }
              break;
          case /* Tagger */4 :
              _oldVNodes = {
                hd: oldNode._1,
                tl: oldVNodes.tl
              };
              continue ;
          
        }
        var oldRest$2 = oldVNodes.tl;
        if (newVNodes) {
          var newNode$1 = newVNodes.hd;
          if (newNode$1.TAG === /* Tagger */4) {
            patchVNodesOnElems(_1(newNode$1._0, callbacks), elem, elems, idx, {
                  hd: oldNode,
                  tl: /* [] */0
                }, {
                  hd: newNode$1._1,
                  tl: /* [] */0
                });
            _newVNodes = newVNodes.tl;
            _oldVNodes = oldRest$2;
            _idx = idx + 1 | 0;
            continue ;
          }
          var oldChild$4 = get$1(elems, idx);
          var newChild$2 = patchVNodesOnElems_CreateElement(callbacks, newNode$1);
          insertBefore(elem, newChild$2, oldChild$4);
          elem.removeChild(oldChild$4);
          _newVNodes = newVNodes.tl;
          _oldVNodes = oldRest$2;
          _idx = idx + 1 | 0;
          continue ;
        }
        var child$1 = get$1(elems, idx);
        elem.removeChild(child$1);
        _newVNodes = /* [] */0;
        _oldVNodes = oldRest$2;
        continue ;
      }
      if (!newVNodes) {
        return ;
      }
      var newChild$3 = patchVNodesOnElems_CreateElement(callbacks, newVNodes.hd);
      elem.appendChild(newChild$3);
      _newVNodes = newVNodes.tl;
      _oldVNodes = /* [] */0;
      _idx = idx + 1 | 0;
      continue ;
    }}

  function patchVNodesIntoElement(callbacks, elem, oldVNodes, newVNodes) {
    var elems = elem.childNodes;
    patchVNodesOnElems(callbacks, elem, elems, 0, oldVNodes, newVNodes);
    return newVNodes;
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function run$1(_callbacks, _cmds) {
    while(true) {
      var cmds = _cmds;
      var callbacks = _callbacks;
      if (typeof cmds === "number") {
        return ;
      }
      switch (cmds.TAG | 0) {
        case /* Mapper */0 :
            var subCallbacks = _1(cmds._0, callbacks);
            _cmds = cmds._1;
            _callbacks = subCallbacks;
            continue ;
        case /* Batch */1 :
            return fold_left((function(callbacks){
                      return function (param, cmd) {
                        return run$1(callbacks, cmd);
                      }
                      }(callbacks)), undefined, cmds._0);
        case /* EnqueueCall */2 :
            return _1(cmds._0, callbacks);
        
      }
    }}
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function run(oldCallbacks, newCallbacks, oldSub, newSub) {
    var enable = function (_callbacks, _subs) {
      while(true) {
        var subs = _subs;
        var callbacks = _callbacks;
        if (typeof subs === "number") {
          return ;
        }
        switch (subs.TAG | 0) {
          case /* Batch */0 :
              var subs$1 = subs._0;
              if (subs$1) {
                return iter$1((function(callbacks){
                          return function (param) {
                            return enable(callbacks, param);
                          }
                          }(callbacks)), subs$1);
              } else {
                return ;
              }
          case /* Registration */1 :
              subs._2.contents = _1(subs._1, callbacks);
              return ;
          case /* Mapper */2 :
              var subCallbacks = _1(subs._0, callbacks);
              _subs = subs._1;
              _callbacks = subCallbacks;
              continue ;
          
        }
      }  };
    var disable = function (_callbacks, _subs) {
      while(true) {
        var subs = _subs;
        var callbacks = _callbacks;
        if (typeof subs === "number") {
          return ;
        }
        switch (subs.TAG | 0) {
          case /* Batch */0 :
              var subs$1 = subs._0;
              if (subs$1) {
                return iter$1((function(callbacks){
                          return function (param) {
                            return disable(callbacks, param);
                          }
                          }(callbacks)), subs$1);
              } else {
                return ;
              }
          case /* Registration */1 :
              var diCB = subs._2;
              var cb = diCB.contents;
              if (cb !== undefined) {
                diCB.contents = undefined;
                return _1(cb, undefined);
              } else {
                return ;
              }
          case /* Mapper */2 :
              var subCallbacks = _1(subs._0, callbacks);
              _subs = subs._1;
              _callbacks = subCallbacks;
              continue ;
          
        }
      }  };
    if (typeof oldSub === "number") {
      if (typeof newSub === "number") {
        return newSub;
      }
      
    } else {
      switch (oldSub.TAG | 0) {
        case /* Batch */0 :
            if (typeof newSub !== "number" && newSub.TAG === /* Batch */0) {
              var aux = function (_oldList, _newList) {
                while(true) {
                  var newList = _newList;
                  var oldList = _oldList;
                  if (oldList) {
                    var oldRest = oldList.tl;
                    var oldSubSub = oldList.hd;
                    if (newList) {
                      run(oldCallbacks, newCallbacks, oldSubSub, newList.hd);
                      _newList = newList.tl;
                      _oldList = oldRest;
                      continue ;
                    }
                    disable(oldCallbacks, oldSubSub);
                    _newList = /* [] */0;
                    _oldList = oldRest;
                    continue ;
                  }
                  if (!newList) {
                    return ;
                  }
                  enable(newCallbacks, newList.hd);
                  _newList = newList.tl;
                  _oldList = /* [] */0;
                  continue ;
                }            };
              aux(oldSub._0, newSub._0);
              return newSub;
            }
            break;
        case /* Registration */1 :
            if (typeof newSub !== "number" && newSub.TAG === /* Registration */1 && oldSub._0 === newSub._0) {
              newSub._2.contents = oldSub._2.contents;
              return newSub;
            }
            break;
        case /* Mapper */2 :
            if (typeof newSub !== "number" && newSub.TAG === /* Mapper */2) {
              var olderCallbacks = _1(oldSub._0, oldCallbacks);
              var newerCallbacks = _1(newSub._0, newCallbacks);
              run(olderCallbacks, newerCallbacks, oldSub._1, newSub._1);
              return newSub;
            }
            break;
        
      }
    }
    disable(oldCallbacks, oldSub);
    enable(newCallbacks, newSub);
    return newSub;
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function programStateWrapper(initModel, pump, shutdown) {
    var model = {
      contents: initModel
    };
    var callbacks = {
      contents: {
        enqueue: (function (_msg) {
            console.log("INVALID enqueue CALL!");
            
          }),
        on: (function (param) {
            
          })
      }
    };
    var pumperInterface = _1(pump, callbacks);
    var pending = {
      contents: undefined
    };
    var handler = function (msg) {
      var msgs = pending.contents;
      if (msgs !== undefined) {
        pending.contents = {
          hd: msg,
          tl: msgs
        };
        return ;
      }
      pending.contents = /* [] */0;
      var newModel = _2(pumperInterface.handleMsg, model.contents, msg);
      model.contents = newModel;
      var msgs$1 = pending.contents;
      if (msgs$1 !== undefined) {
        if (msgs$1) {
          pending.contents = undefined;
          return iter$1(handler, rev(msgs$1));
        } else {
          pending.contents = undefined;
          return ;
        }
      }
      throw {
            RE_EXN_ID: "Failure",
            _1: "INVALID message queue state, should never be None during message processing!",
            Error: new Error()
          };
    };
    var render_events = {
      contents: /* [] */0
    };
    var finalizedCBs_enqueue = handler;
    var finalizedCBs_on = function (msg) {
      if (typeof msg === "number") {
        return iter$1(handler, render_events.contents);
      }
      if (msg.TAG === /* AddRenderMsg */0) {
        render_events.contents = append(render_events.contents, {
              hd: msg._0,
              tl: /* [] */0
            });
        return ;
      }
      var msg$1 = msg._0;
      render_events.contents = filter$1(function (mg) {
              return msg$1 !== mg;
            })(render_events.contents);
      
    };
    var finalizedCBs = {
      enqueue: finalizedCBs_enqueue,
      on: finalizedCBs_on
    };
    callbacks.contents = finalizedCBs;
    var pi_requestShutdown = function (param) {
      callbacks.contents = {
        enqueue: (function (_msg) {
            console.log("INVALID message enqueued when shut down");
            
          }),
        on: (function (param) {
            
          })
      };
      var cmd = _1(shutdown, model.contents);
      _1(pumperInterface.shutdown, cmd);
      
    };
    var render_string = function (param) {
      return _1(pumperInterface.render_string, model.contents);
    };
    _1(pumperInterface.startup, undefined);
    return {
            pushMsg: handler,
            shutdown: pi_requestShutdown,
            getHtmlString: render_string
          };
  }

  function programLoop(update, view, subscriptions, initModel, initCmd, parentNode) {
    if (parentNode === undefined) {
      return function (callbacks) {
        var oldSub = {
          contents: /* NoSub */0
        };
        var handleSubscriptionChange = function (model) {
          var newSub = _1(subscriptions, model);
          oldSub.contents = run(callbacks, callbacks, oldSub.contents, newSub);
          
        };
        return {
                startup: (function (param) {
                    run$1(callbacks, initCmd);
                    handleSubscriptionChange(initModel);
                    
                  }),
                render_string: (function (model) {
                    return renderToHtmlString(_1(view, model));
                  }),
                handleMsg: (function (model, msg) {
                    var match = _2(update, model, msg);
                    var newModel = match[0];
                    run$1(callbacks, match[1]);
                    handleSubscriptionChange(newModel);
                    return newModel;
                  }),
                shutdown: (function (cmd) {
                    run$1(callbacks, cmd);
                    oldSub.contents = run(callbacks, callbacks, oldSub.contents, /* NoSub */0);
                    
                  })
              };
      };
    }
    var parentNode$1 = valFromOption(parentNode);
    return function (callbacks) {
      var priorRenderedVdom = {
        contents: /* [] */0
      };
      var latestModel = {
        contents: initModel
      };
      var nextFrameID = {
        contents: undefined
      };
      var doRender = function (_delta) {
        var _id = nextFrameID.contents;
        if (_id === undefined) {
          return ;
        }
        var newVdom_0 = _1(view, latestModel.contents);
        var newVdom = {
          hd: newVdom_0,
          tl: /* [] */0
        };
        var justRenderedVdom = patchVNodesIntoElement(callbacks, parentNode$1, priorRenderedVdom.contents, newVdom);
        priorRenderedVdom.contents = justRenderedVdom;
        _1(callbacks.contents.on, /* Render */0);
        nextFrameID.contents = undefined;
        
      };
      var scheduleRender = function (param) {
        var match = nextFrameID.contents;
        if (match !== undefined) {
          return ;
        }
        var id = window.requestAnimationFrame(doRender);
        nextFrameID.contents = id;
        
      };
      var clearPnode = function (param) {
        while(parentNode$1.childNodes.length > 0) {
          var firstChild = parentNode$1.firstChild;
          if (firstChild !== null) {
            parentNode$1.removeChild(firstChild);
          }
          
        }      
      };
      var oldSub = {
        contents: /* NoSub */0
      };
      var handleSubscriptionChange = function (model) {
        var newSub = _1(subscriptions, model);
        oldSub.contents = run(callbacks, callbacks, oldSub.contents, newSub);
        
      };
      var handlerStartup = function (param) {
        clearPnode();
        run$1(callbacks, initCmd);
        handleSubscriptionChange(latestModel.contents);
        nextFrameID.contents = -1;
        doRender();
        
      };
      var render_string = function (model) {
        return renderToHtmlString(_1(view, model));
      };
      var handler = function (model, msg) {
        var match = _2(update, model, msg);
        var newModel = match[0];
        latestModel.contents = newModel;
        run$1(callbacks, match[1]);
        scheduleRender();
        handleSubscriptionChange(newModel);
        return newModel;
      };
      var handlerShutdown = function (cmd) {
        nextFrameID.contents = undefined;
        run$1(callbacks, cmd);
        oldSub.contents = run(callbacks, callbacks, oldSub.contents, /* NoSub */0);
        priorRenderedVdom.contents = /* [] */0;
        clearPnode();
        
      };
      return {
              startup: handlerStartup,
              render_string: render_string,
              handleMsg: handler,
              shutdown: handlerShutdown
            };
    };
  }

  function program(param, pnode, flags) {
    polyfills();
    var match = _1(param.init, flags);
    var initModel = match[0];
    var opnode = (pnode == null) ? undefined : some(pnode);
    var pumpInterface = programLoop(param.update, param.view, param.subscriptions, initModel, match[1], opnode);
    return programStateWrapper(initModel, pumpInterface, param.shutdown);
  }

  function standardProgram(param, pnode, args) {
    return program({
                init: param.init,
                update: param.update,
                view: param.view,
                subscriptions: param.subscriptions,
                shutdown: (function (_model) {
                    return /* NoCmd */0;
                  })
              }, pnode, args);
  }

  function beginnerProgram(param, pnode, param$1) {
    var update = param.update;
    var model = param.model;
    return standardProgram({
                init: (function (param) {
                    return [
                            model,
                            /* NoCmd */0
                          ];
                  }),
                update: (function (model, msg) {
                    return [
                            _2(update, model, msg),
                            /* NoCmd */0
                          ];
                  }),
                view: param.view,
                subscriptions: (function (_model) {
                    return /* NoSub */0;
                  })
              }, pnode, undefined);
  }
  /* No side effect */

  function map$2(f, a) {
    var l = a.length;
    if (l === 0) {
      return [];
    }
    var r = caml_make_vect(l, _1(f, a[0]));
    for(var i = 1; i < l; ++i){
      r[i] = _1(f, a[i]);
    }
    return r;
  }

  function to_list(a) {
    var _i = a.length - 1 | 0;
    var _res = /* [] */0;
    while(true) {
      var res = _res;
      var i = _i;
      if (i < 0) {
        return res;
      }
      _res = {
        hd: a[i],
        tl: res
      };
      _i = i - 1 | 0;
      continue ;
    }}

  function fold_right(f, a, x) {
    var r = x;
    for(var i = a.length - 1 | 0; i >= 0; --i){
      r = _2(f, a[i], r);
    }
    return r;
  }
  /* No side effect */

  function get(dict, k) {
    if ((k in dict)) {
      return some(dict[k]);
    }
    
  }
  /* No side effect */

  function classify$1(x) {
    var ty = typeof x;
    if (ty === "string") {
      return {
              TAG: /* JSONString */0,
              _0: x
            };
    } else if (ty === "number") {
      return {
              TAG: /* JSONNumber */1,
              _0: x
            };
    } else if (ty === "boolean") {
      if (x === true) {
        return /* JSONTrue */1;
      } else {
        return /* JSONFalse */0;
      }
    } else if (x === null) {
      return /* JSONNull */2;
    } else if (Array.isArray(x)) {
      return {
              TAG: /* JSONArray */3,
              _0: x
            };
    } else {
      return {
              TAG: /* JSONObject */2,
              _0: x
            };
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  var classify = classify$1;
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function error(e) {
    if (e.TAG === /* Ok */0) {
      return ;
    } else {
      return some(e._0);
    }
  }

  function first(fst, e) {
    if (e.TAG === /* Ok */0) {
      return fst;
    } else {
      return e;
    }
  }

  function error_of_first(fst, e) {
    if (e.TAG === /* Ok */0) {
      return error(fst);
    } else {
      return some(e._0);
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function height(param) {
    if (param) {
      return param.h;
    } else {
      return 0;
    }
  }

  function create(l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */{
            l: l,
            v: x,
            d: d,
            r: r,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          };
  }

  function singleton(x, d) {
    return /* Node */{
            l: /* Empty */0,
            v: x,
            d: d,
            r: /* Empty */0,
            h: 1
          };
  }

  function bal(l, x, d, r) {
    var hl = l ? l.h : 0;
    var hr = r ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l.r;
        var ld = l.d;
        var lv = l.v;
        var ll = l.l;
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        }
        if (lr) {
          return create(create(ll, lv, ld, lr.l), lr.v, lr.d, create(lr.r, x, d, r));
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Map.bal",
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.bal",
            Error: new Error()
          };
    }
    if (hr <= (hl + 2 | 0)) {
      return /* Node */{
              l: l,
              v: x,
              d: d,
              r: r,
              h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            };
    }
    if (r) {
      var rr = r.r;
      var rd = r.d;
      var rv = r.v;
      var rl = r.l;
      if (height(rr) >= height(rl)) {
        return create(create(l, x, d, rl), rv, rd, rr);
      }
      if (rl) {
        return create(create(l, x, d, rl.l), rl.v, rl.d, create(rl.r, rv, rd, rr));
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.bal",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Map.bal",
          Error: new Error()
        };
  }

  function is_empty(param) {
    if (param) {
      return false;
    } else {
      return true;
    }
  }

  function add(x, data, m) {
    if (!m) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              d: data,
              r: /* Empty */0,
              h: 1
            };
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      if (d === data) {
        return m;
      } else {
        return /* Node */{
                l: l,
                v: x,
                d: data,
                r: r,
                h: m.h
              };
      }
    }
    if (c < 0) {
      var ll = add(x, data, l);
      if (l === ll) {
        return m;
      } else {
        return bal(ll, v, d, r);
      }
    }
    var rr = add(x, data, r);
    if (r === rr) {
      return m;
    } else {
      return bal(l, v, d, rr);
    }
  }

  function find(x, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var c = caml_string_compare(x, param.v);
        if (c === 0) {
          return param.d;
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_first(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.l;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.l;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.r;
            continue ;
          }      }
        _param = param.r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_first_opt(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var v = param.v;
      if (_1(f, v)) {
        var _v0 = v;
        var _d0 = param.d;
        var _param$1 = param.l;
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return [
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1.v;
          if (_1(f, v$1)) {
            _param$1 = param$1.l;
            _d0 = param$1.d;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.r;
          continue ;
        }    }
      _param = param.r;
      continue ;
    }}

  function find_last(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.r;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.r;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.l;
            continue ;
          }      }
        _param = param.l;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_last_opt(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var v = param.v;
      if (_1(f, v)) {
        var _v0 = v;
        var _d0 = param.d;
        var _param$1 = param.r;
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return [
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1.v;
          if (_1(f, v$1)) {
            _param$1 = param$1.r;
            _d0 = param$1.d;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.l;
          continue ;
        }    }
      _param = param.l;
      continue ;
    }}

  function find_opt(x, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var c = caml_string_compare(x, param.v);
      if (c === 0) {
        return some(param.d);
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    }}

  function mem(x, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return false;
      }
      var c = caml_string_compare(x, param.v);
      if (c === 0) {
        return true;
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    }}

  function min_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param.l;
        if (!l) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = l;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function min_binding_opt(_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var l = param.l;
      if (!l) {
        return [
                param.v,
                param.d
              ];
      }
      _param = l;
      continue ;
    }}

  function max_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var r = param.r;
        if (!r) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function max_binding_opt(_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var r = param.r;
      if (!r) {
        return [
                param.v,
                param.d
              ];
      }
      _param = r;
      continue ;
    }}

  function remove_min_binding(param) {
    if (param) {
      var l = param.l;
      if (l) {
        return bal(remove_min_binding(l), param.v, param.d, param.r);
      } else {
        return param.r;
      }
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Map.remove_min_elt",
          Error: new Error()
        };
  }

  function merge(t1, t2) {
    if (!t1) {
      return t2;
    }
    if (!t2) {
      return t1;
    }
    var match = min_binding(t2);
    return bal(t1, match[0], match[1], remove_min_binding(t2));
  }

  function remove(x, m) {
    if (!m) {
      return /* Empty */0;
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      return merge(l, r);
    }
    if (c < 0) {
      var ll = remove(x, l);
      if (l === ll) {
        return m;
      } else {
        return bal(ll, v, d, r);
      }
    }
    var rr = remove(x, r);
    if (r === rr) {
      return m;
    } else {
      return bal(l, v, d, rr);
    }
  }

  function update$1(x, f, m) {
    if (m) {
      var r = m.r;
      var d = m.d;
      var v = m.v;
      var l = m.l;
      var c = caml_string_compare(x, v);
      if (c === 0) {
        var data = _1(f, some(d));
        if (data === undefined) {
          return merge(l, r);
        }
        var data$1 = valFromOption(data);
        if (d === data$1) {
          return m;
        } else {
          return /* Node */{
                  l: l,
                  v: x,
                  d: data$1,
                  r: r,
                  h: m.h
                };
        }
      }
      if (c < 0) {
        var ll = update$1(x, f, l);
        if (l === ll) {
          return m;
        } else {
          return bal(ll, v, d, r);
        }
      }
      var rr = update$1(x, f, r);
      if (r === rr) {
        return m;
      } else {
        return bal(l, v, d, rr);
      }
    }
    var data$2 = _1(f, undefined);
    if (data$2 !== undefined) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              d: valFromOption(data$2),
              r: /* Empty */0,
              h: 1
            };
    } else {
      return /* Empty */0;
    }
  }

  function iter(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      iter(f, param.l);
      _2(f, param.v, param.d);
      _param = param.r;
      continue ;
    }}

  function map(f, param) {
    if (!param) {
      return /* Empty */0;
    }
    var l$prime = map(f, param.l);
    var d$prime = _1(f, param.d);
    var r$prime = map(f, param.r);
    return /* Node */{
            l: l$prime,
            v: param.v,
            d: d$prime,
            r: r$prime,
            h: param.h
          };
  }

  function mapi(f, param) {
    if (!param) {
      return /* Empty */0;
    }
    var v = param.v;
    var l$prime = mapi(f, param.l);
    var d$prime = _2(f, v, param.d);
    var r$prime = mapi(f, param.r);
    return /* Node */{
            l: l$prime,
            v: v,
            d: d$prime,
            r: r$prime,
            h: param.h
          };
  }

  function fold(f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (!m) {
        return accu;
      }
      _accu = _3(f, m.v, m.d, fold(f, m.l, accu));
      _m = m.r;
      continue ;
    }}

  function for_all(p, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return true;
      }
      if (!_2(p, param.v, param.d)) {
        return false;
      }
      if (!for_all(p, param.l)) {
        return false;
      }
      _param = param.r;
      continue ;
    }}

  function exists(p, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return false;
      }
      if (_2(p, param.v, param.d)) {
        return true;
      }
      if (exists(p, param.l)) {
        return true;
      }
      _param = param.r;
      continue ;
    }}

  function add_min_binding(k, x, param) {
    if (param) {
      return bal(add_min_binding(k, x, param.l), param.v, param.d, param.r);
    } else {
      return singleton(k, x);
    }
  }

  function add_max_binding(k, x, param) {
    if (param) {
      return bal(param.l, param.v, param.d, add_max_binding(k, x, param.r));
    } else {
      return singleton(k, x);
    }
  }

  function join(l, v, d, r) {
    if (!l) {
      return add_min_binding(v, d, r);
    }
    if (!r) {
      return add_max_binding(v, d, l);
    }
    var rh = r.h;
    var lh = l.h;
    if (lh > (rh + 2 | 0)) {
      return bal(l.l, l.v, l.d, join(l.r, v, d, r));
    } else if (rh > (lh + 2 | 0)) {
      return bal(join(l, v, d, r.l), r.v, r.d, r.r);
    } else {
      return create(l, v, d, r);
    }
  }

  function concat(t1, t2) {
    if (!t1) {
      return t2;
    }
    if (!t2) {
      return t1;
    }
    var match = min_binding(t2);
    return join(t1, match[0], match[1], remove_min_binding(t2));
  }

  function concat_or_join(t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  }

  function split(x, param) {
    if (!param) {
      return [
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
    var r = param.r;
    var d = param.d;
    var v = param.v;
    var l = param.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      return [
              l,
              some(d),
              r
            ];
    }
    if (c < 0) {
      var match = split(x, l);
      return [
              match[0],
              match[1],
              join(match[2], v, d, r)
            ];
    }
    var match$1 = split(x, r);
    return [
            join(l, v, d, match$1[0]),
            match$1[1],
            match$1[2]
          ];
  }

  function merge$1(f, s1, s2) {
    if (s1) {
      var v1 = s1.v;
      if (s1.h >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge$1(f, s1.l, match[0]), v1, _3(f, v1, some(s1.d), match[1]), merge$1(f, s1.r, match[2]));
      }
      
    } else if (!s2) {
      return /* Empty */0;
    }
    if (s2) {
      var v2 = s2.v;
      var match$1 = split(v2, s1);
      return concat_or_join(merge$1(f, match$1[0], s2.l), v2, _3(f, v2, match$1[1], some(s2.d)), merge$1(f, match$1[2], s2.r));
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "map.ml",
            393,
            10
          ],
          Error: new Error()
        };
  }

  function union(f, s1, s2) {
    if (!s1) {
      return s2;
    }
    if (!s2) {
      return s1;
    }
    var d2 = s2.d;
    var v2 = s2.v;
    var d1 = s1.d;
    var v1 = s1.v;
    if (s1.h >= s2.h) {
      var match = split(v1, s2);
      var d2$1 = match[1];
      var l = union(f, s1.l, match[0]);
      var r = union(f, s1.r, match[2]);
      if (d2$1 !== undefined) {
        return concat_or_join(l, v1, _3(f, v1, d1, valFromOption(d2$1)), r);
      } else {
        return join(l, v1, d1, r);
      }
    }
    var match$1 = split(v2, s1);
    var d1$1 = match$1[1];
    var l$1 = union(f, match$1[0], s2.l);
    var r$1 = union(f, match$1[2], s2.r);
    if (d1$1 !== undefined) {
      return concat_or_join(l$1, v2, _3(f, v2, valFromOption(d1$1), d2), r$1);
    } else {
      return join(l$1, v2, d2, r$1);
    }
  }

  function filter(p, m) {
    if (!m) {
      return /* Empty */0;
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var l$prime = filter(p, l);
    var pvd = _2(p, v, d);
    var r$prime = filter(p, r);
    if (pvd) {
      if (l === l$prime && r === r$prime) {
        return m;
      } else {
        return join(l$prime, v, d, r$prime);
      }
    } else {
      return concat(l$prime, r$prime);
    }
  }

  function partition(p, param) {
    if (!param) {
      return [
              /* Empty */0,
              /* Empty */0
            ];
    }
    var d = param.d;
    var v = param.v;
    var match = partition(p, param.l);
    var lf = match[1];
    var lt = match[0];
    var pvd = _2(p, v, d);
    var match$1 = partition(p, param.r);
    var rf = match$1[1];
    var rt = match$1[0];
    if (pvd) {
      return [
              join(lt, v, d, rt),
              concat(lf, rf)
            ];
    } else {
      return [
              concat(lt, rt),
              join(lf, v, d, rf)
            ];
    }
  }

  function cons_enum(_m, _e) {
    while(true) {
      var e = _e;
      var m = _m;
      if (!m) {
        return e;
      }
      _e = /* More */{
        _0: m.v,
        _1: m.d,
        _2: m.r,
        _3: e
      };
      _m = m.l;
      continue ;
    }}

  function compare(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return -1;
        } else {
          return 0;
        }
      }
      if (!e2) {
        return 1;
      }
      var c = caml_string_compare(e1._0, e2._0);
      if (c !== 0) {
        return c;
      }
      var c$1 = _2(cmp, e1._1, e2._1);
      if (c$1 !== 0) {
        return c$1;
      }
      _e2 = cons_enum(e2._2, e2._3);
      _e1 = cons_enum(e1._2, e1._3);
      continue ;
    }}

  function equal(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return false;
        } else {
          return true;
        }
      }
      if (!e2) {
        return false;
      }
      if (caml_string_compare(e1._0, e2._0) !== 0) {
        return false;
      }
      if (!_2(cmp, e1._1, e2._1)) {
        return false;
      }
      _e2 = cons_enum(e2._2, e2._3);
      _e1 = cons_enum(e1._2, e1._3);
      continue ;
    }}

  function cardinal(param) {
    if (param) {
      return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
    } else {
      return 0;
    }
  }

  function bindings_aux(_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (!param) {
        return accu;
      }
      _param = param.l;
      _accu = {
        hd: [
          param.v,
          param.d
        ],
        tl: bindings_aux(accu, param.r)
      };
      continue ;
    }}

  function bindings(s) {
    return bindings_aux(/* [] */0, s);
  }

  var ObjectDict = {
    empty: /* Empty */0,
    is_empty: is_empty,
    mem: mem,
    add: add,
    update: update$1,
    singleton: singleton,
    remove: remove,
    merge: merge$1,
    union: union,
    compare: compare,
    equal: equal,
    iter: iter,
    fold: fold,
    for_all: for_all,
    exists: exists,
    filter: filter,
    partition: partition,
    cardinal: cardinal,
    bindings: bindings,
    min_binding: min_binding,
    min_binding_opt: min_binding_opt,
    max_binding: max_binding,
    max_binding_opt: max_binding_opt,
    choose: min_binding,
    choose_opt: min_binding_opt,
    split: split,
    find: find,
    find_opt: find_opt,
    find_first: find_first,
    find_first_opt: find_first_opt,
    find_last: find_last,
    find_last_opt: find_last_opt,
    map: map,
    mapi: mapi
  };

  var ParseFail = /* @__PURE__ */create$1("Tea_json.Decoder.ParseFail");

  var string = /* Decoder */{
    _0: (function (value) {
        var s = classify(value);
        if (typeof s === "number" || s.TAG !== /* JSONString */0) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-string value"
                };
        } else {
          return {
                  TAG: /* Ok */0,
                  _0: s._0
                };
        }
      })
  };

  var $$int = /* Decoder */{
    _0: (function (value) {
        var n = classify(value);
        if (typeof n === "number") {
          return {
                  TAG: /* Error */1,
                  _0: "Non-int value"
                };
        }
        if (n.TAG !== /* JSONNumber */1) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-int value"
                };
        }
        var n$1 = n._0;
        if (n$1 > min_int && n$1 < max_int) {
          return {
                  TAG: /* Ok */0,
                  _0: n$1 | 0
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: "number out of int range"
                };
        }
      })
  };

  var $$float = /* Decoder */{
    _0: (function (value) {
        var n = classify(value);
        if (typeof n === "number" || n.TAG !== /* JSONNumber */1) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-float-value"
                };
        } else {
          return {
                  TAG: /* Ok */0,
                  _0: n._0
                };
        }
      })
  };

  var bool = /* Decoder */{
    _0: (function (value) {
        var match = classify(value);
        if (typeof match !== "number") {
          return {
                  TAG: /* Error */1,
                  _0: "Non-boolean value"
                };
        }
        switch (match) {
          case /* JSONFalse */0 :
              return {
                      TAG: /* Ok */0,
                      _0: false
                    };
          case /* JSONTrue */1 :
              return {
                      TAG: /* Ok */0,
                      _0: true
                    };
          case /* JSONNull */2 :
              return {
                      TAG: /* Error */1,
                      _0: "Non-boolean value"
                    };
          
        }
      })
  };

  function $$null(v) {
    return /* Decoder */{
            _0: (function (value) {
                var match = classify(value);
                if (typeof match === "number" && match >= 2) {
                  return {
                          TAG: /* Ok */0,
                          _0: v
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-null value"
                        };
                }
              })
          };
  }

  function list(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-list value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-list value"
                        };
                }
                var parse = function (v) {
                  var r = _1(decoder$1, v);
                  if (r.TAG === /* Ok */0) {
                    return r._0;
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: r._0,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: map$3(parse, to_list(a._0))
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "list -> " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function array(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                var parse = function (v) {
                  var r = _1(decoder$1, v);
                  if (r.TAG === /* Ok */0) {
                    return r._0;
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: r._0,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: map$2(parse, a._0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "array -> " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function keyValuePairs(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-keyValuePair value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-keyValuePair value"
                        };
                }
                var o$1 = o._0;
                var keys = Object.keys(o$1);
                var parse = function (k, l) {
                  var v = get(o$1, k);
                  if (v !== undefined) {
                    var r = _1(decoder$1, valFromOption(v));
                    if (r.TAG === /* Ok */0) {
                      return {
                              hd: [
                                k,
                                r._0
                              ],
                              tl: l
                            };
                    }
                    throw {
                          RE_EXN_ID: ParseFail,
                          _1: r._0,
                          Error: new Error()
                        };
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: "Key is undefined: " + k,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: fold_right(parse, keys, /* [] */0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "Invalid keyValuePair parsing: " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function dict(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-dict value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-dict value"
                        };
                }
                var o$1 = o._0;
                var keys = Object.keys(o$1);
                var parse = function (k, d) {
                  var v = get(o$1, k);
                  if (v !== undefined) {
                    var r = _1(decoder$1, valFromOption(v));
                    if (r.TAG === /* Ok */0) {
                      return add(k, r._0, d);
                    }
                    throw {
                          RE_EXN_ID: ParseFail,
                          _1: r._0,
                          Error: new Error()
                        };
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: "Key is undefined: " + k,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: fold_right(parse, keys, /* Empty */0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "Invalid dict parsing: " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function field(key, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-fieldable value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-fieldable value"
                        };
                }
                var v = get(o._0, key);
                if (v === undefined) {
                  return {
                          TAG: /* Error */1,
                          _0: "Field Value is undefined: " + key
                        };
                }
                var o$1 = _1(decoder$1, valFromOption(v));
                if (o$1.TAG === /* Ok */0) {
                  return o$1;
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "field `" + (key + ("` -> " + o$1._0))
                        };
                }
              })
          };
  }

  function at(fields, dec) {
    return fold_right$1(field, fields, dec);
  }

  function index(idx, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                var a$1 = a._0;
                if (idx < 0 || idx > a$1.length) {
                  return {
                          TAG: /* Error */1,
                          _0: "Array index out of range: " + String(idx)
                        };
                } else {
                  return _1(decoder$1, get$1(a$1, idx));
                }
              })
          };
  }

  function maybe(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var r = _1(decoder$1, value);
                if (r.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: some(r._0)
                        };
                } else {
                  return {
                          TAG: /* Ok */0,
                          _0: undefined
                        };
                }
              })
          };
  }

  function oneOf(decoders) {
    return /* Decoder */{
            _0: (function (value) {
                var parse = function (v, _param) {
                  while(true) {
                    var param = _param;
                    if (!param) {
                      return {
                              TAG: /* Error */1,
                              _0: "No one-of's matched"
                            };
                    }
                    var rest = param.tl;
                    try {
                      var ok = _1(param.hd._0, v);
                      if (ok.TAG === /* Ok */0) {
                        return ok;
                      } else {
                        return parse(v, rest);
                      }
                    }
                    catch (exn){
                      _param = rest;
                      continue ;
                    }
                  }              };
                return parse(value, decoders);
              })
          };
  }

  function map$1(mapper, decoder1) {
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var v1 = _1(decoder1$1, value);
                if (v1.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _1(mapper, v1._0)
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "map " + v1._0
                        };
                }
              })
          };
  }

  function map2(mapper, decoder1, decoder2) {
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _2(mapper, match._0, match$1._0)
                        };
                }
                var e = error_of_first(match, match$1);
                if (e !== undefined) {
                  return {
                          TAG: /* Error */1,
                          _0: "map2 -> " + e
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map3(mapper, decoder1, decoder2, decoder3) {
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _3(mapper, match._0, match$1._0, match$2._0)
                        };
                }
                var e = first(match$2, first(match$1, match));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map3 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map4(mapper, decoder1, decoder2, decoder3, decoder4) {
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _4(mapper, match._0, match$1._0, match$2._0, match$3._0)
                        };
                }
                var e = first(match$3, first(match$2, first(match$1, match)));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map4 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map5(mapper, decoder1, decoder2, decoder3, decoder4, decoder5) {
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _5(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0)
                        };
                }
                var e = first(match$4, first(match$3, first(match$2, first(match$1, match))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map5 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map6(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _6(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0)
                        };
                }
                var e = first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map6 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map7(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7) {
    var decoder7$1 = decoder7._0;
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                var match$6 = _1(decoder7$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0 && match$6.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _7(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0, match$6._0)
                        };
                }
                var e = first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match))))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map7 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map8(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7, decoder8) {
    var decoder8$1 = decoder8._0;
    var decoder7$1 = decoder7._0;
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                var match$6 = _1(decoder7$1, value);
                var match$7 = _1(decoder8$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0 && match$6.TAG === /* Ok */0 && match$7.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _8(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0, match$6._0, match$7._0)
                        };
                }
                var e = first(match$7, first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map8 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function succeed(v) {
    return /* Decoder */{
            _0: (function (_value) {
                return {
                        TAG: /* Ok */0,
                        _0: v
                      };
              })
          };
  }

  function fail(e) {
    return /* Decoder */{
            _0: (function (_value) {
                return {
                        TAG: /* Error */1,
                        _0: e
                      };
              })
          };
  }

  var value = /* Decoder */{
    _0: (function (value) {
        return {
                TAG: /* Ok */0,
                _0: value
              };
      })
  };

  function andThen(func, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var r = _1(decoder$1, value);
                if (r.TAG !== /* Ok */0) {
                  return r;
                }
                var andThenDecoder = _1(func, r._0);
                return _1(andThenDecoder._0, value);
              })
          };
  }

  function lazy_(func) {
    return andThen(func, /* Decoder */{
                _0: (function (_value) {
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  })
              });
  }

  function nullable(decoder) {
    return oneOf({
                hd: $$null(undefined),
                tl: {
                  hd: map$1((function (v) {
                          return some(v);
                        }), decoder),
                  tl: /* [] */0
                }
              });
  }

  function decodeValue(decoder, value) {
    try {
      return _1(decoder._0, value);
    }
    catch (raw_e){
      var e = internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === ParseFail) {
        return {
                TAG: /* Error */1,
                _0: e._1
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown JSON parsing error"
              };
      }
    }
  }

  function decodeEvent(decoder, value) {
    try {
      return _1(decoder._0, value);
    }
    catch (raw_e){
      var e = internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === ParseFail) {
        return {
                TAG: /* Error */1,
                _0: e._1
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown JSON parsing error"
              };
      }
    }
  }

  function decodeString(decoder, string) {
    try {
      var value = JSON.parse(string);
      return decodeValue(decoder, value);
    }
    catch (exn){
      return {
              TAG: /* Error */1,
              _0: "Invalid JSON string"
            };
    }
  }

  var Decoder = {
    ObjectDict: ObjectDict,
    ParseFail: ParseFail,
    string: string,
    $$int: $$int,
    $$float: $$float,
    bool: bool,
    $$null: $$null,
    list: list,
    array: array,
    keyValuePairs: keyValuePairs,
    dict: dict,
    field: field,
    at: at,
    index: index,
    maybe: maybe,
    oneOf: oneOf,
    map: map$1,
    map2: map2,
    map3: map3,
    map4: map4,
    map5: map5,
    map6: map6,
    map7: map7,
    map8: map8,
    succeed: succeed,
    fail: fail,
    value: value,
    andThen: andThen,
    lazy_: lazy_,
    nullable: nullable,
    decodeValue: decodeValue,
    decodeEvent: decodeEvent,
    decodeString: decodeString
  };
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function text(str) {
    return {
            TAG: /* Text */1,
            _0: str
          };
  }

  function br(props) {
    return fullnode("", "br", "br", "br", props, /* [] */0);
  }

  function div(keyOpt, uniqueOpt, props, nodes) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var unique = uniqueOpt !== undefined ? uniqueOpt : "";
    return fullnode("", "div", key, unique, props, nodes);
  }

  function span(keyOpt, uniqueOpt, props, nodes) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var unique = uniqueOpt !== undefined ? uniqueOpt : "";
    return fullnode("", "span", key, unique, props, nodes);
  }

  function button(keyOpt, uniqueOpt, props, nodes) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var unique = uniqueOpt !== undefined ? uniqueOpt : "";
    return fullnode("", "button", key, unique, props, nodes);
  }

  var style = style$1;

  function onClick(msg) {
    return onMsg("click", msg);
  }

  Decoder.at({
        hd: "target",
        tl: {
          hd: "value",
          tl: /* [] */0
        }
      }, Decoder.string);

  Decoder.at({
        hd: "target",
        tl: {
          hd: "checked",
          tl: /* [] */0
        }
      }, Decoder.bool);

  Decoder.field("keyCode", Decoder.$$int);

  var noNode = noNode$1;
  /* targetValue Not a pure module */

  function set(param_0) {
    return /* Set */{
            _0: param_0
          };
  }

  function init(param) {
    return 4;
  }

  function update(model, v) {
    if (typeof v !== "number") {
      return v._0;
    }
    switch (v) {
      case /* Increment */0 :
          return model + 1 | 0;
      case /* Decrement */1 :
          return model - 1 | 0;
      case /* Reset */2 :
          return 0;
      
    }
  }

  function view_button(title, msg) {
    return button(undefined, undefined, {
                hd: onClick(msg),
                tl: /* [] */0
              }, {
                hd: text(title),
                tl: /* [] */0
              });
  }

  function view(model) {
    return div(undefined, undefined, /* [] */0, {
                hd: span(undefined, undefined, {
                      hd: style("text-weight", "bold"),
                      tl: /* [] */0
                    }, {
                      hd: text(String(model)),
                      tl: /* [] */0
                    }),
                tl: {
                  hd: br(/* [] */0),
                  tl: {
                    hd: view_button("Increment", /* Increment */0),
                    tl: {
                      hd: br(/* [] */0),
                      tl: {
                        hd: view_button("Decrement", /* Decrement */1),
                        tl: {
                          hd: br(/* [] */0),
                          tl: {
                            hd: view_button("Set to 42", /* Set */{
                                  _0: 42
                                }),
                            tl: {
                              hd: br(/* [] */0),
                              tl: {
                                hd: model !== 0 ? view_button("Reset", /* Reset */2) : noNode,
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              });
  }

  var partial_arg = {
    model: 4,
    update: update,
    view: view
  };

  function main(param, param$1) {
    return beginnerProgram(partial_arg, param);
  }

  var increment = /* Increment */0;

  var decrement = /* Decrement */1;

  var reset = /* Reset */2;
  /* Tea_html Not a pure module */

  exports.decrement = decrement;
  exports.increment = increment;
  exports.init = init;
  exports.main = main;
  exports.reset = reset;
  exports.set = set;
  exports.update = update;
  exports.view = view;
  exports.view_button = view_button;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
